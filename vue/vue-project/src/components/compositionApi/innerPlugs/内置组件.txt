一.<Transition>
    在发生以下情况触发：
        由 v-if 所触发的切换
        由 v-show 所触发的切换
        由特殊元素 <component> 切换的动态组件
        改变特殊的 key 属性
    props:
        type
        mode    避免同时布局out-in in-out
        appear
        name    css选择器.className-enter-from （CSS默认：.v-enter-from）
        key     特殊attr，发生变化，触发过度效果
        enter-from-class    指定自定义的过渡 class
        enter-active-class
        enter-to-class
        leave-from-class
        leave-active-class
        leave-to-class

    钩子函数：
        <Transition
          @before-enter="onBeforeEnter"
          @enter="onEnter"
          @after-enter="onAfterEnter"
          @enter-cancelled="onEnterCancelled"
          @before-leave="onBeforeLeave"
          @leave="onLeave"
          @after-leave="onAfterLeave"
          @leave-cancelled="onLeaveCancelled"
        >

        
二.<TransitionGroup>
    对 v-for 列表中的元素或组件的插入、移除和顺序改变添加动画效果
    props：
        tag 指定一个元素作为容器元素来渲染
    eg:
        <TransitionGroup name="list" tag="ul">
          <li v-for="item in items" :key="item">
            {{ item }}
          </li>
        </TransitionGroup>
        .list-enter-active,
        .list-leave-active {
          transition: all 0.5s ease;
        }
        .list-enter-from,
        .list-leave-to {
          opacity: 0;
          transform: translateX(30px);
        }


三.<KeepAlive>
    在多个组件间动态切换时缓存被移除的组件实例,避免组件状态重置
    props：
        include <KeepAlive>     默认会缓存内部的所有组件实例，但通过 include 和 exclude prop 限制组件缓存
        exclude
        max     限制可被缓存的最大组件实例数,LRU 缓存机制
    hook:
        onActivated()
        onDeactivated()
        eg：
            import { onActivated, onDeactivated } from 'vue'
            onActivated(() => {
              // 调用时机为首次挂载
              // 以及每次从缓存中被重新插入时
            })
            onDeactivated(() => {
              // 在从 DOM 上移除、进入缓存
              // 以及组件卸载时调用
            })
    eg:
        <KeepAlive>
          <component :is="activeComponent" />
        </KeepAlive>

四.<Teleport>
    将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去
    能够更改渲染dom结果
    多个 <Teleport> 组件可以将其内容挂载在同一个目标元素上，而顺序就是简单的顺次追加
    使用场景：
        由于深层嵌套的弹框组件受父组件影响，所以在写样式的时候都需要考虑到父组件，比如 z-index 不能太高，定位不能使用绝对定位等
    props:
        to     to="target"传送当前结构至目标下进行渲染
        defer 使用 defer prop 推迟 Teleport 的目标解析，直到应用的其他部分挂载

五.<Suspense>
    用来在组件树中协调对异步依赖的处理
    在组件树上层等待下层的多个嵌套异步依赖项解析完成，并可以在等待时渲染一个加载状态,在顶层展示出加载中或加载失败的状态
    场景：
        在这个组件树中有多个嵌套组件，要渲染出它们，首先得解析一些异步资源。
        如果没有 <Suspense>，则每个都需要处理自己的加载、报错和完成状态。
        在最坏的情况下，我们可能会在页面上看到三个旋转的加载态，在不同的时间显示出内容。
    可以等待的异步依赖：
        1.带有async setup() 钩子的组件。<script setup> 有顶层 await 表达式的组件。
        2.异步组件  defineAsyncComponent
    异步组件：
        定义：
            异步组件默认就是“suspensible”，异步组件会被当作 <Suspense> 的一个异步依赖，
            加载状态是由 <Suspense> 控制，而该组件自己的加载、报错、延时和超时等选项都将被忽略
        场景：
            1.选项式api使用async
                export default {
                  async setup() {
                    const res = await fetch(...)
                    const posts = await res.json()
                    return {
                      posts
                    }
                  }
                }
            2.顶层 await 表达式会自动让该组件成为一个异步依赖
                <script setup>
                    const res = await fetch(...)
                    const posts = await res.json()
                </script>
            3.defineAsyncComponent
    嵌套的异步组件：
        <Suspense>下只能有一个顶级的组件(2个slot内容可选)
    attrs:
        suspensible     设置后，内部的 <Suspense> 会将异步依赖项处理都会交给父级 <Suspense>
                        不设置，内部的 <Suspense> 会有自己的回退插槽
    slot:
        default
        fallback
    hook:
        resolve pending fallback
    eg：
        <Suspense @resolve="" @pending="" @fallback="onFallback">
          <!-- 具有深层异步依赖的组件 -->
          <template #default>
              <Dashboard />
          </template>

          <!-- 在 #fallback 插槽中显示 “正在加载中” -->
          <template #fallback>
            Loading...
          </template>
        </Suspense>
    组合使用：
        eg:
            <RouterView v-slot="{ Component }">
              <template v-if="Component">
                <Transition mode="out-in">
                  <KeepAlive>
                    <Suspense>
                      <!-- 主要内容 -->
                      <component :is="Component"></component>

                      <!-- 加载中状态 -->
                      <template #fallback>
                        正在加载...
                      </template>
                    </Suspense>
                  </KeepAlive>
                </Transition>
              </template>
            </RouterView>




