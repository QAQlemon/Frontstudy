ref
    原理：getter/setter，封装reactive
reactive
    原理：proxy

本质：基于对象属性的读写不同拦截方式
    1.基于对象本身的getter/setter

    2.基于代理对象proxy拦截目标对象的get/set操作
        get 方法拦截属性的读取操作。
        set 方法拦截属性的赋值操作。
        apply 方法拦截函数的调用。
        has 方法拦截 HasProperty 操作，即查找对象中是否有某属性。可用来隐藏一些属性不被 in 运算符发现。
        construct 方法拦截 new 指令。即在 new 指令创建实例的时候可以对对象中的参数进行一些初始化修改操作。
        deleteProperty方法拦截 delete 指令，可用来保护某些对象属性无法被删除。
        defineProperty方法拦截了Object.defineProperty操作。
        getOwnPropertyDescriptor方法拦截Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者undefined
        getPrototypeOf方法主要用来拦截获取对象原型。
        isExtensible方法拦截Object.isExtensible操作。
        ownKeys方法用来拦截对象自身属性的读取操作。
        preventExtensions方法拦截Object.preventExtensions()。该方法必须返回一个布尔值，否则会被自动转为布尔值。
        setPrototypeOf方法主要用来拦截Object.setPrototypeOf方法。

        eg:
            let count={
                name:'asd'
            }
            const proxy = new Proxy(
                count,
                {
                    get(target, p, receiver) {
                    },
                    set(target, p, newValue, receiver) {
                    }
                }
            );



