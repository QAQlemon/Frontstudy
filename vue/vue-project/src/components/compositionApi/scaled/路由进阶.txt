一.导航守卫
    作用：决定路由的最终跳转或取消
    设置范围：全局级，路由级，组件级
    当点击切换路由时：

    eg：
        全局级
            //@param to
            //@param from
            //@param next       可选参数
            //@return false     取消跳转
            //        route     路由地址对象{path:'',name:'',component:A}
            router.beforeEach((to, from) => {})
            router.beforeResolve()
            router.afterEach()
        路由级
            beforeEnter: (to, from)=> {}
            beforeEnter: [func1,func2...]
        组件级
            onBeforeRouteUpdate((to, from)=>{
              // 在当前路由改变，但是该组件被复用时调用
              // 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，
              // 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
              // 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`
            })
            onBeforeRouteLeave((to, from)=>{
                // 在导航离开渲染该组件的对应路由时调用
                // 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`
              }
            )
        导航解析流程：
            导航被触发
            在失活的组件里调用 beforeRouteLeave 守卫
            调用全局的 beforeEach 守卫
                || 在路由配置里调用 beforeEnter(路由级)
                || 在重用的组件里调用 beforeRouteUpdate(组件级别) 守卫(2.2+)
            解析异步路由组件
            //在被激活的组件里调用 beforeRouteEnter(组件级,注：组合式api不提供)
            调用全局的 beforeResolve 守卫(2.5+)
            导航被确认
            调用全局的 afterEach 钩子
            触发 DOM 更新
            调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入
            //接组件的生命周期 mount update umount...

二.路由元信息
    简介：

    api:
        route.meta对象        获取从父字段到子字段合并后的meta信息
        route.matched数组     matched 是一个数组，包含了当前路由匹配到的所有路由记录
    eg:
        参考router.js
三.数据获取
    简介：进入某个路由后，需要从服务器获取数据
    数据获取时机：
        导航完成之后获取
            马上导航和渲染组件,可以显示加载提示
            先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示“加载中”之类的指示
        导航完成之前获取
            在为后面的视图获取数据时，用户会停留在当前的界面，因此建议在数据获取期间
            导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航
四.RouterView插槽
    简介：
        RouterView 组件暴露了一个插槽，可以用来渲染路由组件
    常用于：
        1.<transition>动画效果
        2.组件之间的props参数传递
        3.模板引用，通过useTemplateRef()获取指定了ref的element
    eg：
        <router-view v-slot="{ Component }">
          <component :is="Component" />
        </router-view>

五.过度动效
    1.<routerView>对应的组件过渡
        关键：<routerView>插槽
        eg:
            <router-view v-slot="{ Component }">
              <transition name="fade">
                <component :is="Component" />
              </transition>
            </router-view>

    2.单个路由过度
        关键：<routerView>插槽 + route元信息
        eg:
            <router-view v-slot="{ Component, route }">
              <!-- 使用任何自定义过渡和回退到 `fade` -->
              <transition :name="route.meta.transition || 'fade'">
                <component :is="Component" />
              </transition>
            </router-view>
    3.基于路由的动态过渡
        关键：<routerView>插槽 + route元信息 + router.afterEach()
        eg:
            router.afterEach((to, from) => {//todo 修改to.meta.transition})
            <router-view v-slot="{ Component, route }">
              <!-- 使用动态过渡名称 -->
              <transition :name="route.meta.transition">
                <component :is="Component" />
              </transition>
            </router-view>
    4.强制在复用的视图之间进行过渡,在相同路由上使用不同的参数触发过渡
        关键：<routerView>插槽 + :key变化
        eg:
            <router-view v-slot="{ Component, route }">
              <transition name="fade">
                <component :is="Component" :key="route.path" />
              </transition>
            </router-view>


六.滚动行为
    简介：
        使用前端路由，当切换新路由时，将页面滚到顶部，或者是保持原先的滚动位置
    eg：
        const router = createRouter({
          history: createWebHashHistory(),
          routes: [...],
          scrollBehavior (to, from, savedPosition) {
            // return 期望滚动到哪个的位置
          }
        })
七.路由懒加载
    简介：
        components和component可以接收promise,js动态导入import()返回Promise对象
    eg；
        {
            path: '/meta',
            //动态导入
            component: ()=>{return import('视图组件')}
        }
    将组件按组分块
        // vite.config.js
        export default defineConfig({
          build: {
            rollupOptions: {
              output: {
                //todo 方式一  通过数组将指定的多个组件进行分组打包
                manualChunks: {
                  vue: ['vue','vue-router'],
                  router: ['@/components/compositionApi/scaled/router/RouterDemo.vue']
                },

                //todo 方式二  通过str处理判断分组进行打包
                manualChunks:(id)=> {
                  if (id.includes('node_modules')) {
                    // return id.toString().split('node_modules/')[1].split('/')[0].toString();
                    return 'node_modules'
                  }
                  if (id.includes('basic')) {
                    return 'basic'
                  }
                },
              },
            },
          },
        })
八.导航故障
    检测导航故障
        const navigationResult = await router.push('/my-profile')
        if (navigationResult) {
          // 导航被阻止
        } else {
          // 导航成功 (包括重新导航的情况)
          this.isMenuOpen = false
        }
    全局导航故障
        router.afterEach((to, from, failure) => {
          if (failure) {
            sendToAnalytics(to, from, failure)
          }
        })
    鉴别导航故障
        isNavigationFailure()函数
        NavigationFailureType.aborted       导航守卫中返回 false
        NavigationFailureType.cancelled     在当前导航完成之前又有了一个新的导航
        NavigationFailureType.duplicated    导航被阻止，已经在目标位置
    导航故障的属性
        router.push('/admin').then(failure => {
          if (isNavigationFailure(failure, NavigationFailureType.aborted)) {
            failure.to.path // '/admin'
            failure.from.path // '/'
          }
        })
    检测抽重定向
        route.redirectedFrom 属性
九.动态路由
    简介：
        通过api动态的添加和删除的路由
    注：
        添加的新路由与当前所处路由匹配，需手动router.push(),router.replace()才能显示到新路由

        导航守卫中
            如果你决定在导航守卫内部添加或删除路由，你不应该调用 router.replace()，而是通过返回新的位置来触发重定向
    api:
        router.addRoute()   会返回一个删除路由的回调
        router.replace()
        router.hasRoute()
        router.getRoutes()
